{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ncontroller_1 = Controller(PRIMARY)\nlf_motor = Motor(Ports.PORT1, GearSetting.RATIO_18_1, True)\nlb_motor = Motor(Ports.PORT9, GearSetting.RATIO_18_1, False)\nrf_motor = Motor(Ports.PORT10, GearSetting.RATIO_18_1, True)\nclaw_motor = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)\narm_motor = Motor(Ports.PORT8, GearSetting.RATIO_18_1, False)\nrb_motor = Motor(Ports.PORT7, GearSetting.RATIO_18_1, False)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n#endregion VEXcode Generated Robot Configuration\n\n# ----------------------------------------------------------------------------\n#                                                                            \n#    Project:        X-Drive Remote Control\n\n#    Description:    Left Joystick X - rotation\n#                    Right Joystick X - horizontal movement\n#                    Right Joystick Y - vertical movement\n#\n#    Configuration:  V5 Clawbot (Individual Motors)\n#                    Controller\n#                    Claw Motor in Port 3\n#                    Arm Motor in Port 8\n#                    Left Front Motor in Port 1\n#                    Left Back Motor in Port 9\n#                    Right Front Motor in Port 10   \n#                    Right Back Motor in Port 7\n#                                                                            \n# ----------------------------------------------------------------------------\n\n\n# ---- CONSTANTS ---- #\n\nspeed = .8 # base speed\nturn_speed = .7 # speed when turning\nclaw_speed = 1 # speed of claw opening & closing\narm_speed = 1 # speed of arm raising & lowering\n\ndt_move_directions = {\n    'f':[FORWARD, FORWARD, REVERSE, REVERSE], # forward\n    'b':[REVERSE, REVERSE, FORWARD, FORWARD], # backward\n    'l':[FORWARD, FORWARD, FORWARD, FORWARD], # left\n    'r':[REVERSE, REVERSE, REVERSE, REVERSE], # right\n    'fl':[FORWARD, FORWARD, None, None], # forward & left\n    'fr':[None, None, REVERSE, REVERSE], # forward & right\n    'bl':[None, None, FORWARD, FORWARD], # backward & left\n    'br':[REVERSE, REVERSE, None, None] # backward & right\n}\ndt_turn_directions = {\n    'left':[FORWARD, REVERSE, FORWARD, REVERSE],\n    'right':[REVERSE, FORWARD, REVERSE, FORWARD]\n}\n\n\n# ---- MOTOR GROUPS ---- #\n\ndrivetrain = MotorGroup(\n    lf_motor,\n    lb_motor,\n    rf_motor,\n    rb_motor)\n\n\n# ---- FUNCTIONS ---- #\n\ndef init(): # sets base motor speeds and other stuff\n    drivetrain.set_velocity(speed*100, PERCENT)\n    claw_motor.set_velocity(claw_speed*100, PERCENT)\n    arm_motor.set_velocity(arm_speed*100, PERCENT)\n\ndef move(direction, amount, unit):\n    drivetrain.set_velocity(speed*100, PERCENT)\n    if dt_move_directions[direction][0] != None: lf_motor.spin_for(dt_move_directions[direction][0], amount, unit, False)\n    if dt_move_directions[direction][2] != None: rf_motor.spin_for(dt_move_directions[direction][2], amount, unit, False)\n    if dt_move_directions[direction][3] != None: rb_motor.spin_for(dt_move_directions[direction][3], amount, unit, False)\n    if dt_move_directions[direction][1] != None: lb_motor.spin_for(dt_move_directions[direction][1], amount, unit)\n    drivetrain.stop()\n\ndef rotate(direction, amount=90):\n    drivetrain.set_velocity(turn_speed*100, PERCENT)\n    lf_motor.spin_for(dt_turn_directions[direction][0], amount*4, DEGREES, False)\n    rf_motor.spin_for(dt_turn_directions[direction][2], amount*4, DEGREES, False)\n    rb_motor.spin_for(dt_turn_directions[direction][3], amount*4, DEGREES, False)\n    lb_motor.spin_for(dt_turn_directions[direction][1], amount*4, DEGREES)\n    drivetrain.stop()\n\n\n# ---- MAIN ---- #\n\ninit()\n\nmove('fl', 3.6, TURNS)\narm_motor.spin_for(FORWARD, 1, TURNS)\n\nspeed = .6\nmove('f', .8, TURNS)\narm_motor.spin_for(REVERSE, 0.4, TURNS)\nmove('b', .5, TURNS)\n\nspeed = .5\nmove('f', .4, TURNS)\narm_motor.spin_for(FORWARD, 0.6, TURNS)\nmove('r', 1.5, TURNS)\nmove('f', .3, TURNS)\nmove('r', 1.5, TURNS)\narm_motor.spin_for(REVERSE, 0.6, TURNS)\nrotate('left')","textLanguage":"python","rconfig":[{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[1],"name":"lf_motor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[9],"name":"lb_motor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[10],"name":"rf_motor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[3],"name":"claw_motor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[8],"name":"arm_motor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[7],"name":"rb_motor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22}],"slot":2,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.0","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Physical"}