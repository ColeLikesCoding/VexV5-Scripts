{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ncontroller_1 = Controller(PRIMARY)\nlf_motor = Motor(Ports.PORT1, GearSetting.RATIO_18_1, True)\nlb_motor = Motor(Ports.PORT9, GearSetting.RATIO_18_1, False)\nrf_motor = Motor(Ports.PORT10, GearSetting.RATIO_18_1, True)\nclaw_motor = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)\narm_motor = Motor(Ports.PORT8, GearSetting.RATIO_18_1, False)\nrb_motor = Motor(Ports.PORT7, GearSetting.RATIO_18_1, False)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n#endregion VEXcode Generated Robot Configuration\n\n# ----------------------------------------------------------------------------\n#                                                                            \n#    Project:        X-Drive Remote Control\n\n#    Description:    Left Joystick X - rotation\n#                    Right Joystick X - horizontal movement\n#                    Right Joystick Y - vertical movement\n#\n#    Configuration:  V5 Clawbot (Individual Motors)\n#                    Controller\n#                    Claw Motor in Port 3\n#                    Arm Motor in Port 8\n#                    Left Front Motor in Port 1\n#                    Left Back Motor in Port 9\n#                    Right Front Motor in Port 10   \n#                    Right Back Motor in Port 7\n#                                                                            \n# ----------------------------------------------------------------------------\n\n# constants\nspeed = .4\nturn_speed = .4\nclaw_speed = 1\narm_speed = .7\nmultipliers = {\n    'f':[100, 100, -100, -100],\n    'b':[-100, -100, 100, 100],\n    'l':[100, 100, 100, 100],\n    'r':[-100, -100, -100, -100]\n}\n\n# ---- Motor groups ---- #\n\n# all motors\nmotors = MotorGroup(\n    lf_motor,\n    lb_motor,\n    rf_motor,\n    rb_motor,\n    claw_motor,\n    arm_motor)\n\nmotors.set_stopping(BRAKE)\n\n# drivetrain\ndrivetrain = MotorGroup(\n    lf_motor,\n    lb_motor,\n    rf_motor,\n    rb_motor)\n\n# movement\ndef UDLR(direction):\n    lf_motor.set_velocity(speed * multipliers[direction][0], PERCENT)\n    rf_motor.set_velocity(speed * multipliers[direction][2], PERCENT)\n    rb_motor.set_velocity(speed * multipliers[direction][3], PERCENT)\n    lb_motor.set_velocity(speed * multipliers[direction][1], PERCENT)\n\ndef joystickMovement():\n    # get axes input\n    axes = [\n        controller_1.axis1.position(),\n        controller_1.axis2.position(),\n        controller_1.axis3.position(),\n        controller_1.axis4.position()\n        ]\n    # calculate velocities\n    velocities = [\n        (axes[2] - axes[3]) * speed - axes[0] * turn_speed,\n        (axes[2] - axes[3]) * speed + axes[0] * turn_speed,\n        (-axes[2] - axes[3]) * speed - axes[0] * turn_speed,\n        (-axes[2] - axes[3]) * speed + axes[0] * turn_speed\n        ]\n    # set motor velocities\n    lf_motor.set_velocity(velocities[0], PERCENT)\n    lb_motor.set_velocity(velocities[1], PERCENT)\n    rf_motor.set_velocity(velocities[2], PERCENT)\n    rb_motor.set_velocity(velocities[3], PERCENT)\n\ndef arrowMovement():\n    if controller_1.buttonUp.pressing():\n        UDLR('f')\n    elif controller_1.buttonDown.pressing():\n        UDLR('b')\n    elif controller_1.buttonLeft.pressing():\n        UDLR('l')\n    elif controller_1.buttonRight.pressing():\n        UDLR('r')\n\ndef move():\n    if controller_1.buttonUp.pressing() or controller_1.buttonDown.pressing() or controller_1.buttonLeft.pressing() or controller_1.buttonRight.pressing():\n        arrowMovement()\n    else:\n        joystickMovement()\n\n# speed management\ndef showSpeed():\n    global speed\n    controller_1.screen.clear_screen()\n    controller_1.screen.set_cursor(1, 1)\n    controller_1.screen.print(\"Speed: \" + str(int(speed*100)) + \"%\")\n\ndef speedCheck():\n    global speed\n    if speed > 1:\n        speed = 1\n\ndef updateSpeed(speed_change=None, speed_set=None):\n    global speed, turn_speed, prev_speed, boosting\n    \n    if {speed_change != None} ^ {speed_set != None}:\n        global speed\n        if speed_change != None:\n            speed += speed_change\n        elif speed_set != None:\n            speed = speed_set\n    elif {speed_change != None} and {speed_set != None}:\n        pass\n    \n    speedCheck()\n    showSpeed()\n\n    turn_speed = speed\n    prev_speed = speed\n\n# presets\nloops_run = 0\narm_reset = False\n\ndef preset_A():\n    updateSpeed(speed_set=1)\n\ndef preset_B():\n    global speed\n    global prev_speed\n    global boosting\n    prevSpeed = speed\n    speed = 1\n    boosting = True\n\ndef preset_X():\n    updateSpeed(speed_set=.8)\n\ndef preset_Y():\n    updateSpeed(speed_set=.4)\n\ndef triggerPresets():\n    if controller_1.buttonA.pressing():\n        preset_A()\n    elif controller_1.buttonB.pressing():\n        preset_B()\n    elif controller_1.buttonX.pressing():\n        preset_X()\n    elif controller_1.buttonY.pressing():\n        preset_Y()\n\n# main code\nboosting = False\nprev_speed = 0\ncontroller_1.screen.clear_screen()\nbrain.screen.clear_screen()\nupdateSpeed()\n\n\nwhile True:\n    move()\n\n    if not boosting:\n        triggerPresets()\n\n    if boosting and not controller_1.buttonB.pressing():\n        boosting = False\n        updateSpeed(speed_set=prev_speed)\n    \n    claw_motor.set_velocity((controller_1.buttonL1.pressing() - controller_1.buttonL2.pressing()) * 100 * claw_speed, PERCENT)\n    arm_motor.set_velocity((controller_1.buttonR1.pressing() - controller_1.buttonR2.pressing()) * 100 * arm_speed, PERCENT)\n\n    motors.spin(FORWARD)\n    wait(5, MSEC)","textLanguage":"python","rconfig":[{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[1],"name":"lf_motor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[9],"name":"lb_motor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[10],"name":"rf_motor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[3],"name":"claw_motor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[8],"name":"arm_motor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[7],"name":"rb_motor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.0","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Physical"}