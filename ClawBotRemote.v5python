{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ncontroller_1 = Controller(PRIMARY)\nlf_motor = Motor(Ports.PORT1, GearSetting.RATIO_18_1, True)\nlb_motor = Motor(Ports.PORT9, GearSetting.RATIO_18_1, False)\nrf_motor = Motor(Ports.PORT10, GearSetting.RATIO_18_1, True)\nclaw_motor = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)\narm_motor = Motor(Ports.PORT8, GearSetting.RATIO_18_1, False)\nrb_motor = Motor(Ports.PORT7, GearSetting.RATIO_18_1, False)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n#endregion VEXcode Generated Robot Configuration\n\n# ----------------------------------------------------------------------------\n#                                                                            \n#    Project:        X-Drive Remote Control\n\n#    Description:    Left Joystick X - rotation\n#                    Right Joystick X - horizontal movement\n#                    Right Joystick Y - vertical movement\n#\n#    Configuration:  V5 Clawbot (Individual Motors)\n#                    Controller\n#                    Claw Motor in Port 3\n#                    Arm Motor in Port 8\n#                    Left Front Motor in Port 1\n#                    Left Back Motor in Port 9\n#                    Right Front Motor in Port 10   \n#                    Right Back Motor in Port 7\n#                                                                            \n# ----------------------------------------------------------------------------\n\n# Constants\nspeed = 1\nturn_speed = .6\nclaw_speed = 1\narm_speed = .6\nmultipliers = {\n    'f':[100, 100, -100, -100],\n    'b':[-100, -100, 100, 100],\n    'l':[100, 100, 100, 100],\n    'r':[-100, -100, -100, -100]\n}\n\n# ---- Motor groups ---- #\n\n# All motors\nmotors = MotorGroup(\n    lf_motor,\n    lb_motor,\n    rf_motor,\n    rb_motor,\n    claw_motor,\n    arm_motor)\n\nmotors.set_stopping(BRAKE)\n\n# drivetrain\ndrivetrain = MotorGroup(\n    lf_motor,\n    lb_motor,\n    rf_motor,\n    rb_motor)\n\n# Main loop\nwhile True:\n    # get axes input\n    axes = [\n        controller_1.axis1.position(),\n        controller_1.axis2.position(),\n        controller_1.axis3.position(),\n        controller_1.axis4.position()\n        ]\n    print(axes)\n\n    # calculate velocities\n    velocities = [\n        (axes[2] - axes[3]) * speed - axes[0] * turn_speed,\n        (axes[2] - axes[3]) * speed + axes[0] * turn_speed,\n        (-axes[2] - axes[3]) * speed - axes[0] * turn_speed,\n        (-axes[2] - axes[3]) * speed + axes[0] * turn_speed\n        ]\n\n    # set motor velocities\n    lf_motor.set_velocity(velocities[0], PERCENT)\n    lb_motor.set_velocity(velocities[1], PERCENT)\n    rf_motor.set_velocity(velocities[2], PERCENT)\n    rb_motor.set_velocity(velocities[3], PERCENT)\n\n    # arrow keys\n    if controller_1.buttonUp.pressing(): \n        lf_motor.set_velocity(speed * multipliers['f'][0], PERCENT)\n        rf_motor.set_velocity(speed * multipliers['f'][2], PERCENT)\n        rb_motor.set_velocity(speed * multipliers['f'][3], PERCENT)\n        lb_motor.set_velocity(speed * multipliers['f'][1], PERCENT)\n    elif controller_1.buttonDown.pressing():\n        lf_motor.set_velocity(speed * multipliers['b'][0], PERCENT)\n        rf_motor.set_velocity(speed * multipliers['b'][2], PERCENT)\n        rb_motor.set_velocity(speed * multipliers['b'][3], PERCENT)\n        lb_motor.set_velocity(speed * multipliers['b'][1], PERCENT)                    \n    elif controller_1.buttonLeft.pressing():\n        lf_motor.set_velocity(speed * multipliers['l'][0], PERCENT)\n        rf_motor.set_velocity(speed * multipliers['l'][2], PERCENT)\n        rb_motor.set_velocity(speed * multipliers['l'][3], PERCENT)\n        lb_motor.set_velocity(speed * multipliers['l'][1], PERCENT)\n    elif controller_1.buttonRight.pressing():\n        lf_motor.set_velocity(speed * multipliers['r'][0], PERCENT)\n        rf_motor.set_velocity(speed * multipliers['r'][2], PERCENT)\n        rb_motor.set_velocity(speed * multipliers['r'][3], PERCENT)\n        lb_motor.set_velocity(speed * multipliers['r'][1], PERCENT)\n\n    claw_motor.set_velocity((controller_1.buttonL2.pressing() - controller_1.buttonL1.pressing()) * 100 * claw_speed, PERCENT)\n    arm_motor.set_velocity((controller_1.buttonR1.pressing() - controller_1.buttonR2.pressing()) * 100 * arm_speed, PERCENT)\n\n    # spin motors\n    motors.spin(FORWARD)\n\n    # wait 5ms\n    wait(5, MSEC)\n\n    # speed presets\n    if controller_1.buttonY.pressing():\n        speed = .25\n    elif controller_1.buttonX.pressing():\n        speed = .5\n    elif controller_1.buttonA.pressing():\n        speed = .75\n    elif controller_1.buttonB.pressing():\n        speed = 1","textLanguage":"python","rconfig":[{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[1],"name":"lf_motor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[9],"name":"lb_motor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[10],"name":"rf_motor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[3],"name":"claw_motor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[8],"name":"arm_motor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[7],"name":"rb_motor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22}],"slot":1,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.0","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Physical"}